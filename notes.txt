1. Main programme
(a) Read in four command line arguments - size of the queue, number of jobs to generate for
each producer (each producer will generate the same number of jobs), number of producers,
and number of consumers.
(b) Set-up and initialise the required data structures and variables, as necessary.
(c) Set-up and initialise semaphores, as necessary.
(d) Create the required producers and consumers.
(e) Quit, but ensure that there is process clean-up

MAIN FUNCTION:
bool input_is_valid()
void assign_input()
RingBuffer buff = RingBuffer;
int sem_id = sem_create()

need 3 semaphores:
1 binary for accessing the critical section
1 counting for empty
1 counting for full

Semaphore sem = Semaphore;

for(i = 0; i < n_producers; i++)
  pthread_create (producerid, )


2. Producer
(a) Initialise parameters, as required.
(b) Add the required number of jobs to the queue, with each job being added once every 1 – 5
seconds. If a job is taken (and deleted) by the consumer, then another job can be produced
which has the same id. Duration for each job should be between 1 – 10 seconds. If the
circular queue is full, block while waiting for an empty slot and if a slot doesn’t become
available after 20 seconds, quit, even though you have not produced all the jobs.
(c) Print the status (example format given in example output.txt).
(d) Quit when there are no more jobs left to produce.

PRODUCER:
producer array?
struct Job { ???
int Duration
int id?
}
create_jobs()

for(i = 0; i < n_jobs; i++)
  insert_buffer(job)

do{

//produce an item

wait(empty);
wait(mutex);

//place in buffer

signal(mutex);
signal(full);

}while(true)

Job create_job()?
void add_job()
void quit()


3. Consumer
(a) Initialise parameters, as required.
(b) Take a job from the circular queue and ‘sleep’ for the duration specified. If the circular queue
is empty, block while waiting for jobs and quit if no jobs arrive within 20 seconds.
1
(c) Print the status (example format given in example output.txt).
(d) If there are no jobs left to consume, wait for 20 seconds to check if any new jobs are added,
and if not, quit.

CONSUMER:
void get_job()
void sleep()

do{

wait(full);
wait(mutex);

// remove item from buffer

signal(mutex);
signal(empty);

// consumes item

}while(true)



// LECTURE NOTES //
User-level threads
  faster than kernel level threads
  kernel does not see threads
  blocks whole processpthreads

- PThreads
  - POSIX (Portable Operating System Interface)
  - Standardised threading model
  - can create in a for loop
  - use an array to hold multiple thread ID's
  - use a struct to pass multiple variables to a thread

- Exiting Threads
  - terminates execution after call
  - phtread_exit(0);
  - terminates calling thread and returns value argument
  - pthread_exit() in main -> zombie state ??
  - call pthread_exit in main (good practice as it waits for
  other threads to finish) better than exit(0) as this will
  immediately terminate all threads which could be dangerous.

- Thread Yield
  - pthread_yield();
  - releases cpu
  - return 0 on success, or an error code
  - good practice to use when finished thread execution
  - call within thread function
  - (temporary yield)
  - used for heirarchical access to cpu

- Thread Join
  - wait for thread to finish and exit main program
  - waiting for a thread you are joining with to
    finish (block until then)
  - Does not exit main thread
  - can still continue execution in main after joining
