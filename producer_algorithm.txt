2. Producer
(a) Initialise parameters, as required.
(b) Add the required number of jobs to the queue, with each job being added once every 1 – 5
seconds. If a job is taken (and deleted) by the consumer, then another job can be produced
which has the same id. Duration for each job should be between 1 – 10 seconds. If the
circular queue is full, block while waiting for an empty slot and if a slot doesn’t become
available after 20 seconds, quit, even though you have not produced all the jobs.
(c) Print the status (example format given in example output.txt).
(d) Quit when there are no more jobs left to produce.

PRODUCER:
producer array?
struct Job { ???
int Duration
int id?
}
create_jobs()

for(i = 0; i < n_jobs; i++)
  insert_buffer(job)

do{

//produce an item

wait(empty);
wait(mutex);

//place in buffer

signal(mutex);
signal(full);

}while(true)

Job create_job()?
void add_job()
void quit()

  n_jobs = parameters.n_jobs;
  int* semid = parameters.semid;
while (n_jobs > 0) {
  //produce an item
  //Job* job = new Job;

  wait(empty);
  wait(mutex);

  //check buffer size (use getval full)
  //id = 1 + buffer size
  //duration = rand(5);
  //place in buffer

  signal(mutex);
  signal(full);
  n_jobs--;
}
